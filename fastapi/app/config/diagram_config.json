{
  "diagram_categories": {
    "flowchart": [
      {
        "id": "flowchart1",
        "name": "Application Structure Flowchart",
        "description": "This flowchart illustrates the hierarchical structure of the application, showing the main components and their relationships."
      },
      {
        "id": "flowchart2",
        "name": "Data Flow Flowchart",
        "description": "This flowchart visualizes the flow of data within the application, showing how data is generated, processed, and passed between different components."
      },
      {
        "id": "flowchart3",
        "name": "Service Interaction Flowchart",
        "description": "This flowchart focuses on the interaction between the different services in the application, outlining the steps involved in connecting to the respective services and passing data."
      },
      {
        "id": "flowchart4",
        "name": "User Interface Flowchart",
        "description": "This flowchart depicts the user interface (UI) interactions in the application, illustrating the different screens, input boxes, and buttons."
      },
      {
        "id": "flowchart5",
        "name": "Testing Flowchart",
        "description": "This flowchart outlines the testing process for the application, including the different test cases and their dependencies."
      },
      {
        "id": "flowchart6",
        "name": "Utility Functions Flowchart",
        "description": "This flowchart focuses on the utility functions in the application, illustrating the different utility functions and their relationships."
      },
      {
        "id": "flowchart7",
        "name": "Deployment Flowchart",
        "description": "This flowchart outlines the deployment process of the application, including building, packaging, and deploying to various environments."
      }
    ],
    "sequence_diagram": [
      {
        "id": "sequenceDiagram1",
        "name": "User Interaction Sequence",
        "description": "Shows the sequence of interactions between the user interface (UI) and the application components."
      },
      {
        "id": "sequenceDiagram2",
        "name": "Data Generation Sequence",
        "description": "Illustrates the flow of data generation and processing, including steps like retrieving data, applying data algorithms, and generating outputs."
      },
      {
        "id": "sequenceDiagram3",
        "name": "Service Integration Sequence",
        "description": "Depicts the interaction between the application services and external APIs or libraries."
      },
      {
        "id": "sequenceDiagram4",
        "name": "Configuration Sequence",
        "description": "Shows how the application loads and processes configuration settings."
      },
      {
        "id": "sequenceDiagram5",
        "name": "Testing Sequence",
        "description": "Illustrates the sequence of steps involved in executing tests."
      },
      {
        "id": "sequenceDiagram6",
        "name": "Logging Sequence",
        "description": "Depicts the flow of logging activities within the application."
      },
      {
        "id": "sequenceDiagram7",
        "name": "File Handling Sequence",
        "description": "Shows the sequence of steps involved in file handling operations."
      },
      {
        "id": "sequenceDiagram8",
        "name": "API Communication Sequence",
        "description": "Illustrates the sequence of API calls and responses between different microservices in the application architecture."
      }
    ],
    "class_diagram": [
      {
        "id": "classDiagram1",
        "name": "System Structure",
        "description": "This diagram illustrates the classes in the system, their attributes, methods, and the relationships among them."
      },
      {
        "id": "classDiagram2",
        "name": "User Interaction Classes",
        "description": "This diagram focuses on the classes related to user interactions, showing their attributes, methods, and how they interact with other parts of the system."
      },
      {
        "id": "classDiagram3",
        "name": "Service Integration Classes",
        "description": "This diagram illustrates the classes involved in integrating different services, including their methods and relationships with other classes."
      },
      {
        "id": "classDiagram4",
        "name": "Data Processing Classes",
        "description": "This diagram depicts the classes responsible for data processing, their attributes, methods, and how they interact with data storage and retrieval classes."
      },
      {
        "id": "classDiagram5",
        "name": "Utility Classes",
        "description": "This diagram outlines the utility classes within the system, showing their common methods and relationships."
      }
    ],
    "state_diagram": [
      {
        "id": "stateDiagram1",
        "name": "User Interaction States",
        "description": "This diagram illustrates the states involved in user interaction, showing transitions between states based on user actions."
      },
      {
        "id": "stateDiagram2",
        "name": "Data Processing States",
        "description": "This diagram depicts the states and transitions involved in data processing, including data retrieval, transformation, and storage."
      },
      {
        "id": "stateDiagram3",
        "name": "Service Integration States",
        "description": "This diagram outlines the states related to integrating various services, such as connecting to external APIs, and the transitions between these states."
      },
      {
        "id": "stateDiagram4",
        "name": "System Initialization States",
        "description": "This diagram shows the states involved in system initialization, including configuration loading, service startup, and readiness checks."
      },
      {
        "id": "stateDiagram5",
        "name": "Error Handling States",
        "description": "This diagram focuses on the states related to error handling, illustrating how the system transitions between states in response to different error conditions."
      }
    ],
    "entity_relationship_diagram": [
      {
        "id": "erDiagram1",
        "name": "User Authentication System",
        "description": "This diagram illustrates the USER entity, its attributes, and its relationships with other entities such as ROLE, PERMISSIONS, and SESSION."
      },
      {
        "id": "erDiagram2",
        "name": "Code Repository Management",
        "description": "This diagram shows the REPOSITORY entity and its relationships with BRANCHES, COMMITS, CONTRIBUTORS, and ISSUES."
      },
      {
        "id": "erDiagram3",
        "name": "Issue Tracking System",
        "description": "This diagram represents the ISSUE entity, its attributes, and its relationships with other entities like PROJECT, USER, and COMMENTS."
      },
      {
        "id": "erDiagram4",
        "name": "User Management",
        "description": "This diagram depicts the USER entity, along with relationships to entities like PROFILE, ROLES, and PERMISSIONS."
      },
      {
        "id": "erDiagram5",
        "name": "Content Management",
        "description": "This diagram outlines the CONTENT entity and its relationships with CATEGORIES, TAGS, and AUTHORS."
      },
      {
        "id": "erDiagram6",
        "name": "Order Processing",
        "description": "This diagram illustrates the ORDER entity, its attributes, and relationships with CUSTOMER, PRODUCT, and PAYMENT entities."
      }
    ],
    "user_journey_diagram": [
      {
        "id": "userJourney1",
        "name": "Developer Collaboration Flow",
        "description": "This diagram depicts the journey developers take from cloning a repository, making changes, submitting pull requests, to merging code."
      },
      {
        "id": "userJourney2",
        "name": "Continuous Integration Pipeline",
        "description": "This diagram illustrates the journey a code commit takes through the CI pipeline, including building, testing, reviewing, and deploying."
      },
      {
        "id": "userJourney3",
        "name": "User Onboarding Flow",
        "description": "This diagram outlines the journey a new user takes from signing up, getting oriented, to becoming an active participant in the platform."
      },
      {
        "id": "userJourney4",
        "name": "User Registration Flow",
        "description": "This diagram represents the journey of user registration, from initial signup, verification, profile creation, to successful login."
      },
      {
        "id": "userJourney5",
        "name": "Product Purchase Flow",
        "description": "This diagram illustrates the steps a user takes to search, select, add to cart, and complete the purchase of a product."
      },
      {
        "id": "userJourney6",
        "name": "User Feedback Submission",
        "description": "This diagram outlines the journey a user follows to submit feedback, including navigation, form filling, submission, and acknowledgment."
      }
    ],

    "gantt_diagram": [
      {
        "id": "ganttDiagram1",
        "name": "Project Development Timeline",
        "description": "This Gantt chart illustrates the development timeline for the project, including phases such as planning, development, testing, and deployment."
      },
      {
        "id": "ganttDiagram2",
        "name": "Feature Implementation Timeline",
        "description": "This Gantt chart focuses on the implementation timeline for specific features, showing the start and end dates and dependencies between tasks."
      },
      {
        "id": "ganttDiagram3",
        "name": "Maintenance Schedule",
        "description": "This Gantt chart outlines the schedule for regular maintenance tasks, including updates, bug fixes, and performance optimizations."
      },
      {
        "id": "ganttDiagram4",
        "name": "Release Planning",
        "description": "This Gantt chart illustrates the planning timeline for a software release, including phases such as design, development, testing, and deployment."
      },
      {
        "id": "ganttDiagram5",
        "name": "Sprint Schedule",
        "description": "This Gantt chart outlines the schedule for a development sprint, detailing tasks, dependencies, progress, and milestones."
      },
      {
        "id": "ganttDiagram6",
        "name": "Software Development Lifecycle",
        "description": "This Gantt chart represents the timeline for a generic software development lifecycle, from requirement analysis to deployment and maintenance."
      },
      {
        "id": "ganttDiagram7",
        "name": "Product Launch Schedule",
        "description": "This Gantt chart outlines the timeline for launching a new product, including design, development, marketing, and launch events."
      }
    ],
    "pie_chart": [
      {
        "id": "pieChart1",
        "name": "User Demographics",
        "description": "This pie chart represents the distribution of users across different age groups or regions."
      },
      {
        "id": "pieChart2",
        "name": "Revenue Sources",
        "description": "This pie chart illustrates the proportion of revenue coming from different products or services."
      },
      {
        "id": "pieChart3",
        "name": "System Resource Usage",
        "description": "This pie chart shows the allocation of system resources such as memory, CPU, and storage."
      },
      {
        "id": "pieChart4",
        "name": "Codebase Language Distribution",
        "description": "This pie chart represents the distribution of programming languages used within the codebase, highlighting the primary and secondary languages."
      },
      {
        "id": "pieChart5",
        "name": "Bug Priority Levels",
        "description": "This pie chart illustrates the proportion of bugs categorized by priority levels such as critical, high, medium, and low."
      },
      {
        "id": "pieChart6",
        "name": "Application Layer Resource Usage",
        "description": "This pie chart shows the allocation of resources across different application layers such as frontend, backend, database, and caching."
      },
      {
        "id": "pieChart7",
        "name": "Task Status Distribution",
        "description": "This pie chart shows the distribution of tasks by their statuses such as Completed, In Progress, On Hold, and Not Started."
      },
      {
        "id": "pieChart8",
        "name": "User Engagement Metrics",
        "description": "This pie chart illustrates the engagement of users across various site features like searches, page views, interactions, and social shares."
      },
      {
        "id": "pieChart9",
        "name": "Budget Allocation",
        "description": "This pie chart represents the allocation of a project budget across categories like Development, Marketing, Operations, and Support."
      }
    ],
    "quadrant_chart": [
      {
        "id": "quadrantChart1",
        "name": "Product Priority",
        "description": "This quadrant chart plots products based on their market growth and market share, helping in decision-making for investment and development."
      },
      {
        "id": "quadrantChart2",
        "name": "Risk Assessment",
        "description": "This quadrant chart is used to visualize risks, plotting them based on their potential impact and likelihood, aiding in risk management strategies."
      },
      {
        "id": "quadrantChart3",
        "name": "Customer Segmentation",
        "description": "This quadrant chart represents customers based on their value and engagement, providing insights into customer relationships and marketing strategies."
      },
      {
        "id": "quadrantChart4",
        "name": "Technology Evaluation",
        "description": "This quadrant chart classifies technologies into categories like Emerging, Established, Niche, and Legacy based on market presence and capability."
      },
      {
        "id": "quadrantChart5",
        "name": "Feature Prioritization",
        "description": "This quadrant chart helps prioritize features by plotting them against criteria such as User Value and Development Effort."
      }
    ],
    "requirement_diagram": [
      {
        "id": "requirementDiagram1",
        "name": "Functional Requirements",
        "description": "This diagram visualizes the functional requirements of the system, showing connections and dependencies between various requirements."
      },
      {
        "id": "requirementDiagram2",
        "name": "Non-Functional Requirements",
        "description": "This diagram outlines the non-functional requirements, such as performance and security, and illustrates their relationships to other elements."
      },
      {
        "id": "requirementDiagram3",
        "name": "User Requirements",
        "description": "This diagram focuses on user-related requirements, illustrating how they connect to system functionalities and constraints."
      },
      {
        "id": "requirementDiagram4",
        "name": "User Story Mapping",
        "description": "This diagram shows the relationship between user stories, epics, and themes, providing a visual representation of the product backlog."
      }
    ],
    "gitgraph_diagram": [
      {
        "id": "gitgraphDiagram1",
        "name": "Main Branching Strategy",
        "description": "This Git Graph represents the primary branching strategy, showing the commits and actions on various branches in the main development flow."
      },
      {
        "id": "gitgraphDiagram2",
        "name": "Feature Branching Strategy",
        "description": "This Git Graph visualizes the strategy for feature branches, depicting how features are developed and merged into the main codebase."
      },
      {
        "id": "gitgraphDiagram3",
        "name": "Hotfix Branching Strategy",
        "description": "This Git Graph illustrates the branching strategy for hotfixes, including the creation, development, and merging of hotfix branches."
      },
      {
        "id": "gitgraphDiagram4",
        "name": "Feature Branch Workflow",
        "description": "This Git graph illustrates the workflow of creating, reviewing, and merging feature branches within the main codebase."
      },
      {
        "id": "gitgraphDiagram5",
        "name": "Release Branch Workflow",
        "description": "This Git graph represents the process of managing release branches, including creation, bug fixing, merging, and tagging."
      },
      {
        "id": "gitgraphDiagram6",
        "name": "Hotfix Workflow",
        "description": "This Git graph shows the flow of handling hotfixes, including branch creation from the master, fixing, testing, merging, and deployment."
      }
    ],
    "c4_diagram": [
      {
        "id": "c4Diagram1",
        "name": "System Context",
        "description": "This C4 diagram provides an overview of the entire system, showing how it fits into the larger environment."
      },
      {
        "id": "c4Diagram2",
        "name": "Container View",
        "description": "This C4 diagram shows the high-level structure of the software, focusing on containers and their interactions."
      },
      {
        "id": "c4Diagram3",
        "name": "Component View",
        "description": "This C4 diagram details the components within a container, illustrating how they interact with one another."
      }
    ],
    "mindmap": [
      {
        "id": "mindmap1",
        "name": "Project Planning Mindmap",
        "description": "This mindmap organizes project components like Goals, Milestones, Teams, Resources, Risks, and Timelines, allowing for a comprehensive overview of the project."
      },
      {
        "id": "mindmap2",
        "name": "Software Architecture Mindmap",
        "description": "This mindmap details the architecture of a software system, including Layers, Components, Interfaces, Dependencies, and Technologies used."
      },
      {
        "id": "mindmap3",
        "name": "User Experience (UX) Design Mindmap",
        "description": "This mindmap explores aspects of UX design, such as User Personas, Journey Maps, Wireframes, Prototypes, and User Testing."
      },
      {
        "id": "mindmap4",
        "name": "Development Workflow Mindmap",
        "description": "This mindmap illustrates the development workflow, including Planning, Coding, Testing, Reviewing, Deploying, and Monitoring."
      },
      {
        "id": "mindmap5",
        "name": "Team Collaboration Mindmap",
        "description": "This mindmap outlines collaboration tools and practices within a team, such as Communication Channels, Collaboration Platforms, Document Sharing, and Meeting Schedules."
      },
      {
        "id": "mindmap6",
        "name": "Product Feature Mindmap",
        "description": "This mindmap organizes product features into categories and subcategories, showing the relationship and hierarchy of different functionalities within the product."
      },
      {
        "id": "mindmap7",
        "name": "Project Overview",
        "description": "This mindmap organizes the key concepts, goals, and stakeholders for the project, showing their relationships."
      },
      {
        "id": "mindmap8",
        "name": "System Architecture",
        "description": "This mindmap visually represents the architecture of the system, connecting major components, technologies, and dependencies."
      }
    ],
    "timeline_diagram": [
      {
        "id": "timelineDiagram1",
        "name": "Project Development Timeline",
        "description": "This timeline illustrates the key milestones and events in the project's development history."
      },
      {
        "id": "timelineDiagram2",
        "name": "System Lifecycle Timeline",
        "description": "This timeline depicts the various phases of the system's lifecycle, including design, development, deployment, maintenance, and decommissioning."
      },
      {
        "id": "timelineDiagram3",
        "name": "User Activity Timeline",
        "description": "This timeline shows the chronology of user activities and interactions with the system."
      }
    ],
    "zenuml_sequence_diagram": [
      {
        "id": "zenumlSequenceDiagram1",
        "name": "User Registration ZenUML Sequence",
        "description": "A ZenUML sequence diagram illustrating the process of user registration in the system."
      },
      {
        "id": "zenumlSequenceDiagram2",
        "name": "Data Processing ZenUML Sequence",
        "description": "A ZenUML sequence diagram depicting the steps involved in data processing within the system."
      }
    ],
    "flow_analysis_diagram": [
      {
        "id": "flowAnalysisDiagram1",
        "name": "Code Execution Flow Analysis",
        "description": "This diagram visually breaks down the execution flow of specific code segments, aiding in understanding code behavior and potential bottlenecks."
      },
      {
        "id": "flowAnalysisDiagram2",
        "name": "Data Flow Analysis",
        "description": "Illustrates the flow of data through your application's components, helping in identifying data sources, transformations, and sinks."
      }
    ],
    "software_architecture_diagram": [
      {
        "id": "saDiagram1",
        "name": "Microservices Architecture",
        "description": "This diagram illustrates the various microservices within the system and how they interact with each other through APIs, databases, and messaging queues."
      },
      {
        "id": "saDiagram2",
        "name": "MVC Design Pattern",
        "description": "This diagram outlines the Model-View-Controller design pattern, depicting the interactions between user, view, controller, and model."
      },
      {
        "id": "saDiagram3",
        "name": "Dependency Injection",
        "description": "This diagram represents the injection of dependencies into a class, allowing for more flexible, maintainable, and testable code."
      }
    ],
    "development_workflow_diagram": [
      {
        "id": "devFlow1",
        "name": "Continuous Integration & Deployment",
        "description": "This diagram describes the CI/CD pipeline, including code commit, build, automated tests, staging, and deployment to production."
      },
      {
        "id": "devFlow2",
        "name": "Agile Development Process",
        "description": "This diagram shows the stages of the Agile development process, from sprint planning to daily standup, development, review, and retrospective."
      }
    ],
    "cloud_infrastructure_diagram": [
      {
        "id": "cloudInfra1",
        "name": "AWS Architecture",
        "description": "This diagram represents the Amazon Web Services cloud infrastructure, including EC2 instances, S3 buckets, Lambda functions, and VPC networks."
      },
      {
        "id": "cloudInfra2",
        "name": "Kubernetes Cluster",
        "description": "This diagram illustrates a Kubernetes cluster architecture, showing nodes, pods, services, and the interactions between them."
      }
    ],
    "performance_metrics_chart": [
      {
        "id": "perfMetric1",
        "name": "Response Time Distribution",
        "description": "This chart illustrates the distribution of response times for API calls, highlighting areas for potential optimization."
      },
      {
        "id": "perfMetric2",
        "name": "Error Rate Monitoring",
        "description": "This chart tracks the error rates in the system, categorizing them by type and frequency to facilitate quicker resolution."
      },
      {
        "id": "perfMetric3",
        "name": "System Load Over Time",
        "description": "This chart shows the system load over time, including CPU, memory, and network usage, to understand trends and anticipate scaling needs."
      }
    ]
  },
  "diagram_category_names": {
    "flowchart": "Flowchart",
    "sequence_diagram": "Sequence Diagram",
    "class_diagram": "Class Diagram",
    "state_diagram": "State Diagram",
    "entity_relationship_diagram": "Entity Relationship Diagram",
    "user_journey_diagram": "User Journey Diagram",
    "gantt_diagram": "Gantt Diagram",
    "pie_chart": "Pie Chart",
    "quadrant_chart": "Quadrant Chart",
    "requirement_diagram": "Requirement Diagram",
    "gitgraph_diagram": "Gitgraph Diagram",
    "c4_diagram": "C4 Diagram",
    "mindmap": "Mindmap",
    "timeline_diagram": "Timeline Diagram",
    "zenuml_sequence_diagram": "ZenUML Sequence Diagram",
    "flow_analysis_diagram": "Flow Analysis Diagram",
    "software_architecture_diagram": "Software Architecture Diagram",
    "development_workflow_diagram": "Development Workflow Diagram",
    "cloud_infrastructure_diagram": "Cloud Infrastructure Diagram",
    "performance_metrics_chart": "Performance Metrics Chart"
  }
}
